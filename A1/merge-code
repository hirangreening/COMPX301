    // /**
    //  * Placeholder for merging logic.
    //  * 
    //  * @param runFiles    The list of sorted run files.
    //  * @param mergeFactor The number of ways to merge (2 or 4).
    //  * @throws IOException If an I/O error occurs.
    //  */
    // private static void performMerge(List<String> runFiles, int mergeFactor) throws IOException {
    //     // Ensure the mergeFactor is valid
    //     if (mergeFactor != 2) {
    //         throw new IllegalArgumentException("Merge factor must be 2 for solo solutions.");
    //     }

    //     // Step 1: Distribute runs into two temporary files
    //     File temp1 = new File("temp1.txt");
    //     File temp2 = new File("temp2.txt");

    //     try (BufferedWriter writer1 = new BufferedWriter(new FileWriter(temp1));
    //             BufferedWriter writer2 = new BufferedWriter(new FileWriter(temp2))) {

    //         boolean writeToFirst = true;
    //         for (String runFile : runFiles) {
    //             List<String> lines = Files.readAllLines(Paths.get(runFile));
    //             BufferedWriter writer = writeToFirst ? writer1 : writer2;

    //             for (String line : lines) {
    //                 writer.write(line);
    //                 writer.newLine();
    //             }

    //             writeToFirst = !writeToFirst; // Alternate files
    //         }
    //     }

    //     // Step 2: Perform merge passes until one sorted file remains
    //     File finalSortedFile = performMergePasses(temp1, temp2);

    //     // Step 3: Write the final sorted file to standard output
    //     System.out.println("Final sorted file: " + finalSortedFile.getAbsolutePath());
    //     System.out.println("Final sorted file size: " + finalSortedFile.length());

    //     try (BufferedReader reader = new BufferedReader(new FileReader(finalSortedFile))) {
    //         String line;
    //         while ((line = reader.readLine()) != null) {
    //             System.out.println(line); // Write to standard output
    //         }
    //     }
    // }

    // private static File performMergePasses(File input1, File input2) throws IOException {
    //     File output = new File("final_sorted.txt");
    
    //     while (true) {
    //         System.out.println("Checking termination condition...");
    //         System.out.println("Input1 size: " + input1.length());
    //         System.out.println("Input2 size: " + input2.length());
    
    //         // Termination check: If one input file is empty, the other is fully sorted
    //         if (isFileEmpty(input1)) {
    //             return input2;
    //         }
    //         if (isFileEmpty(input2)) {
    //             return input1;
    //         }
    
    //         // Create a new output file for merging
    //         File tempOutput = new File("temp_sorted.txt");
    
    //         try (BufferedReader reader1 = new BufferedReader(new FileReader(input1));
    //              BufferedReader reader2 = new BufferedReader(new FileReader(input2));
    //              BufferedWriter writer = new BufferedWriter(new FileWriter(tempOutput))) {
    
    //             mergeSortedFiles(reader1, reader2, writer);
    //         }
    
    //         // Debugging: Print file sizes after merging
    //         System.out.println("After merging:");
    //         System.out.println("Merged output size: " + tempOutput.length());
    
    //         // If tempOutput now holds all sorted lines, we're done
    //         if (isFileEmpty(input1) || isFileEmpty(input2)) {
    //             return tempOutput;
    //         }
    
    //         // Swap files for next pass
    //         input1 = tempOutput;
    //         input2 = new File("");  // Empty second file to ensure termination
    //     }
    // }
    

    // private static void mergeSortedFiles(BufferedReader reader1, BufferedReader reader2, BufferedWriter writer) throws IOException {
    //     String line1 = reader1.readLine();
    //     String line2 = reader2.readLine();
    
    //     while (line1 != null && line2 != null) {
    //         if (line1.compareTo(line2) <= 0) {
    //             writer.write(line1);
    //             line1 = reader1.readLine();
    //         } else {
    //             writer.write(line2);
    //             line2 = reader2.readLine();
    //         }
    //         writer.newLine();
    //     }
    
    //     // Write any remaining lines
    //     while (line1 != null) {
    //         writer.write(line1);
    //         writer.newLine();
    //         line1 = reader1.readLine();
    //     }
    //     while (line2 != null) {
    //         writer.write(line2);
    //         writer.newLine();
    //         line2 = reader2.readLine();
    //     }
    
    //     writer.flush();
    //     System.out.println("Merge completed.");
    // }