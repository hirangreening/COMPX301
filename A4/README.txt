# COMPX301 Assignment 4 - Tallest Box Stack

**Authors:** Hiran Greening, 1522172

## Description
This program implements a simulated annealing heuristic to find the tallest possible stack of boxes, given a set of boxes with three integer dimensions each. Each box can be used at most once, in any orientation, and must fit strictly within the box below it (touching faces condition).

## How it Works
- **Input:** A text file with one box per line (three positive integers).
- **Orientations:** All 3 unique orientations for each box are generated. Each box is assigned a unique ID to enforce the single-use condition.
- **Initial Solution:** A greedy stack is built by sorting all orientations by base area (width Ã— length) descending, then by height, and stacking the largest valid boxes, one per box ID.
- **Simulated Annealing:**
  - Neighbour solutions are generated by inserting, removing, or substituting boxes (by orientation), always enforcing the single-use and touching faces conditions.
  - The algorithm accepts better solutions, or sometimes worse ones based on the temperature, which cools as specified (t = t - r).
  - Multiple runs can be performed; the best stack found is output.
- **Output:** The stack is printed from top-most to bottom-most, each line: `width length height running_total_height`.

## Usage
```
javac NPCStack.java
java NPCStack <input_file> <initial_temperature> <cooling_rate> [runs]
```
Example:
```
java NPCStack Boxes/rand0100.boxes 100 0.1 20
```

## Notes
- The program is heuristic and may not always find the optimal stack, but will find a valid tall stack.
- For the special "cubes" case, the greedy initial solution may already be optimal.
- All code is original except for standard Java library usage and assignment-provided hints.

## Authors and Acknowledgements
- Hiran Greening, 1522172
- No external code or AI assistance was used beyond the assignment specification and standard Java documentation.
